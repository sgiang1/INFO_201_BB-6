names <- read.csv("female_names.csv")
names_2013 <- names[]
view(names)
View(names)
View(names)
View(names_2013)
View(names)
names <- read.csv("female_names.csv")
View(names_2013)
names_2013 <- names[names$year == 2013, ]
View(names)
answer <- names_2013[max(names_2013$prop), "name"]
answer <- names_2013[names_2013$prop == max(names_2013$prop), "name"]
names_year <- names[names$year == year, ]
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
answer <- names_2013[names_2013$prop == max(names_2013$prop), "name"]
most_popular_in_year <- function(year) {
names_year <- names[names$year == year, ]
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
return ans
most_popular_in_year(2013)
most_popular_in_year <- function(year) {
names_year <- names[names$year == year, ]
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
return ans
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
names_year <- names[names$year == year, ]
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
most_popular_in_year <- function(year) {
names_year <- names[names$year == year, ]
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
}
most_popular_in_year(2013)
return ans
return ans
most_popular_in_year <- function(year) {
names_year <- names[names$year == year, ]
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
return ans
most_popular_in_year(2013)
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
return ans
cat(ans)
most_popular_in_year <- function(year) {
names_year <- names[names$year == year, ]
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
cat(ans)
}
most_popular_in_year(2013)
# What was the most popular female name in 1994?
most_popular_in_year(1994)
cat(prop)
number_per_year <- function(name, year) {
names_year <- names[names$year == year, ]
prop <- names_year[names_year$name == name, "prop"]
cat(prop)
}
names_2013 <- names[names$year == 2013, ]
answer <- names_2013[names_2013$prop == max(names_2013$prop), "name"]
most_popular_in_year <- function(year) {
names_year <- names[names$year == year, ]
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
cat(ans)
}
most_popular_in_year(1994)
number_per_year <- function(name, year) {
names_year <- names[names$year == year, ]
prop <- names_year[names_year$name == name, "prop"]
cat(prop)
}
number_per_year("Jessica", 1994)
# How many babies had the name 'Laura' in 1995?
number_per_year("Laura", 1995)
# How many babies had the name 'Laura' in 1995?
print(number_per_year("Laura", 1995))
# What was the most popular female name in 1994? Jessica
print(most_popular_in_year(1994))
number_per_year <- function(name, year) {
names_year <- names[names$year == year, ]
prop <- names_year[names_year$name == name, "prop"]
return(prop)
}
# How many babies had the name 'Laura' in 1995?
print(number_per_year("Laura", 1995))
names_year <- names[names$year == year, ]
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
return(ans)
most_popular_in_year <- function(year) {
names_year <- names[names$year == year, ]
ans <- names_year[names_year$prop == max(names_year$prop), "name"]
return(ans)
}
# What was the most popular female name in 1994? Jessica
print(most_popular_in_year(1994))
number_per_year <- function(name, year) {
names_year <- names[names$year == year, ]
prop <- names_year[names_year$name == name, "prop"]
return(prop)
}
# How many babies had the name 'Laura' in 1995?
print(number_per_year("Laura", 1995))
print(number_per_year("Sammy", 2004))
print(number_per_year("Sam", 2004))
print(number_per_year("Samantha", 2004))
df <- read.csv("MinimumWageData.csv")
View(df)
df_year <- filter(df, Year == year)
state_max_wage_year <- function(year) {
df_year <- filter(df, Year == year)
}
state_max_wage_year <- function(year) {
df_year <- filter(df, Year == year)
}
return(select(df_year, State))
max <- max(df_year$State.Minimum.Wage)
ans <- filter(df_year, State.Minimum.Wage == max)
return(select(df_year, State))
install.packages("dplyr", dependencies = TRUE)
library("dplyr")
state_max_wage_year <- function(year) {
df_year <- filter(df, Year == year)
max <- max(df_year$State.Minimum.Wage)
ans <- filter(df_year, State.Minimum.Wage == max)
return(select(df_year, State))
}
state_max_wage_year(1995)
return(select(ans, State))
ans <- filter(df_year, State.Minimum.Wage == max)
return(select(ans, State))
state_max_wage_year <- function(year) {
df_year <- filter(df, Year == year)
max <- max(df_year$State.Minimum.Wage)
ans <- filter(df_year, State.Minimum.Wage == max)
return(select(ans, State))
}
state_max_wage_year(1995)
state_max_wage_year(2000)
state_max_wage_year(2004)
average_wage <- function(year) {
df_year <- filter(df, Year == year)
avg <- mean(df_year$State.Minimum.Wage)
return(avg)
}
average_wage(2004)
install.packages("shiny")
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage()
server <- function(input, output)
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
h1("Lets do a quick survey"),
p("Instructions: Answer the following questions: "),
textInput(
inputId = "username",
label = "What is your name"
),
radioButtons(
inputId = "radio",
label = "Is cereal soup?",
choices = list("yes", "no", "maybe"),
selected = "yes"
),
h1("Your Answers"),
textOutput(outputId = "greeting"),
textOutput(outputId = "radioMessage")
)
server <- function(input, output) {
output$greeting <- renderText({
paste("Hello! ", input$username)
})
outout$radioMessage <- renderText({
paste("You answered ", input$radio, " to whether cereal is a soup")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
h1("Lets do a quick survey"),
p("Instructions: Answer the following questions: "),
textInput(
inputId = "username",
label = "What is your name"
),
radioButtons(
inputId = "radio",
label = "Is cereal soup?",
choices = list("yes", "no", "maybe"),
selected = "yes"
),
h1("Your Answers"),
textOutput(outputId = "greeting"),
textOutput(outputId = "radioMessage")
)
server <- function(input, output) {
output$greeting <- renderText({
paste("Hello! ", input$username)
})
output$radioMessage <- renderText({
paste("You answered ", input$radio, " to whether cereal is a soup")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
h1("Lets do a quick survey"),
p("Instructions: Answer the following questions: "),
textInput(
inputId = "username",
label = "What is your name"
),
radioButtons(
inputId = "radio",
label = "Is cereal soup?",
choices = list("yes", "no", "maybe"),
selected = "yes"
),
sliderInput(
inputId = "slider",
label = "What is your age",
),
h1("Your Answers"),
textOutput(outputId = "greeting"),
textOutput(outputId = "radioMessage")
textOutput(outputId = "slideroutput")
library(shiny)
ui <- fluidPage(
h1("Lets do a quick survey"),
p("Instructions: Answer the following questions: "),
textInput(
inputId = "username",
label = "What is your name"
),
radioButtons(
inputId = "radio",
label = "Is cereal soup?",
choices = list("yes", "no", "maybe"),
selected = "yes"
),
sliderInput(
inputId = "slider",
label = "What is your age",
),
h1("Your Answers"),
textOutput(outputId = "greeting"),
textOutput(outputId = "radioMessage"),
textOutput(outputId = "slideroutput")
)
ui <- fluidPage(
h1("Lets do a quick survey"),
p("Instructions: Answer the following questions: "),
textInput(
inputId = "username",
label = "What is your name"
),
radioButtons(
inputId = "radio",
label = "Is cereal soup?",
choices = list("yes", "no", "maybe"),
selected = "yes"
),
sliderInput(
inputId = "slider",
label = "What is your age",
min = 0,
max = 100
),
h1("Your Answers"),
textOutput(outputId = "greeting"),
textOutput(outputId = "radioMessage"),
textOutput(outputId = "slideroutput")
)
ui <- fluidPage(
h1("Lets do a quick survey"),
p("Instructions: Answer the following questions: "),
textInput(
inputId = "username",
label = "What is your name"
),
radioButtons(
inputId = "radio",
label = "Is cereal soup?",
choices = list("yes", "no", "maybe"),
selected = "yes"
),
sliderInput(
inputId = "slider",
label = "What is your age",
min = 0,
max = 100,
value = 1
),
h1("Your Answers"),
textOutput(outputId = "greeting"),
textOutput(outputId = "radioMessage"),
textOutput(outputId = "slideroutput")
)
library(shiny)
ui <- fluidPage(
h1("Lets do a quick survey"),
p("Instructions: Answer the following questions: "),
textInput(
inputId = "username",
label = "What is your name"
),
radioButtons(
inputId = "radio",
label = "Is cereal soup?",
choices = list("yes", "no", "maybe"),
selected = "yes"
),
sliderInput(
inputId = "slider",
label = "What is your age",
min = 0,
max = 100,
value = 1
),
h1("Your Answers"),
textOutput(outputId = "greeting"),
textOutput(outputId = "radioMessage"),
textOutput(outputId = "slideroutput")
)
server <- function(input, output) {
output$greeting <- renderText({
paste("Hello! ", input$username)
})
output$radioMessage <- renderText({
paste("You answered ", input$radio, " to whether cereal is a soup")
})
output$sliderOutput <- renderText({
paste("You are ", output$sliderInput, " years old")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
h1("Lets do a quick survey"),
p("Instructions: Answer the following questions: "),
textInput(
inputId = "username",
label = "What is your name"
),
radioButtons(
inputId = "radio",
label = "Is cereal soup?",
choices = list("yes", "no", "maybe"),
selected = "yes"
),
sliderInput(
inputId = "slider",
label = "What is your age",
min = 0,
max = 100,
value = 1
),
h1("Your Answers"),
textOutput(outputId = "greeting"),
textOutput(outputId = "radioMessage"),
textOutput(outputId = "sliderOutput")
)
server <- function(input, output) {
output$greeting <- renderText({
paste("Hello! ", input$username)
})
output$radioMessage <- renderText({
paste("You answered ", input$radio, " to whether cereal is a soup")
})
output$sliderOutput <- renderText({
paste("You are ", output$sliderInput, " years old")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
h1("Lets do a quick survey"),
p("Instructions: Answer the following questions: "),
textInput(
inputId = "username",
label = "What is your name"
),
radioButtons(
inputId = "radio",
label = "Is cereal soup?",
choices = list("yes", "no", "maybe"),
selected = "yes"
),
sliderInput(
inputId = "slider",
label = "What is your age",
min = 0,
max = 100,
value = 1
),
h1("Your Answers"),
textOutput(outputId = "greeting"),
textOutput(outputId = "radioMessage"),
textOutput(outputId = "sliderOutput")
)
server <- function(input, output) {
output$greeting <- renderText({
paste("Hello! ", input$username)
})
output$radioMessage <- renderText({
paste("You answered ", input$radio, " to whether cereal is a soup")
})
output$sliderOutput <- renderText({
paste("You are ", output$slider, " years old")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
h1("Lets do a quick survey"),
p("Instructions: Answer the following questions: "),
textInput(
inputId = "username",
label = "What is your name"
),
radioButtons(
inputId = "radio",
label = "Is cereal soup?",
choices = list("yes", "no", "maybe"),
selected = "yes"
),
sliderInput(
inputId = "slider",
label = "What is your age",
min = 0,
max = 100,
value = 1
),
h1("Your Answers"),
textOutput(outputId = "greeting"),
textOutput(outputId = "radioMessage"),
textOutput(outputId = "sliderOutput")
)
server <- function(input, output) {
output$greeting <- renderText({
paste("Hello! ", input$username)
})
output$radioMessage <- renderText({
paste("You answered ", input$radio, " to whether cereal is a soup")
})
output$sliderOutput <- renderText({
paste("You are ", input$slider, " years old")
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('Computer Science')
runApp('Computer Science')
runApp('Computer Science')
to_val <- function(ch) {
if (ch == "k") {
return(1000)
} else if (ch == "M") {
return(1000000)
} else {
return(1000000000)
}
}
df <- mutate(df, pop_fix = as.numeric(substr(Population, 1, length(Population) - 1)) * to_val(substr(Population, length(Population))))
#Sammy Giang
#sgiang1@uw.edu
#I worked on the homework assignment alone using only this quarter's course materials.
#all library statements must be at the top of the page!
library(dplyr)
library(stringr)
library(ggplot2)
# Overview ---------------------------------------------------------------------
# Homework 4: Climate Change Analysis
# Before you begin, make sure you read and understand the assignment description
# on canvas first! This assignment will not make sense otherwise.
# For each question/prompt, write the necessary code to calculate the answer.
# For grading, it's important that you store your answers in the variable names
# listed with each question in `backtics`. Make sure you DO NOT hardcode values
# unless specified to do so in the instructions!
# BEFORE YOU SUBMIT YOUR ASSIGNMENT, MAKE SURE YOU COMMENT OUT ANY PLOT() STATEMENTS
# Loads in your datasets
country_df <- read.csv("country_data.csv") #DO NOT CHANGE!
# Loads in your datasets
country_df <- read.csv("country_data.csv") #DO NOT CHANGE!
setwd("~/Computer Science/INFO_201_Project")
shiny::runApp()
write.csv(df, "path/to/file.csv", row.names = FALSE)
write.csv(df, "User/sam15/Desktop/file.csv", row.names = FALSE)
write.csv(df, "C:\Users\sam15\Desktop/file.csv", row.names = FALSE)
write.csv(df, "C:\\Users\\sam15\\Desktop\\df.csv", row.names=FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df)
runApp()
runApp()
runApp()
runApp()
write.csv(df, "C:\\Users\\Bob\\Desktop\\.csv", row.names=FALSE)
nyc_shape[, mask, drop=TRUE]
mask <- c()
if (TRUE) { mask <- c(mask, "male")}
if (TRUE) { mask <- c(mask, "female") }
nyc_shape <- st_read("nybb.shp")
nyc_shape[, mask, drop=TRUE]
nyc_shape[, mask, drop=FALSE]
View(nyc_shape)
runApp()
runApp()
